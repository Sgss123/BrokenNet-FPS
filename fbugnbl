#include "pch.h"
#include "CG3DSphere.h"
#include "CGDI3DRenderContext.h"
#include "COGL3DRenderContext.h"
#include "CGDI3DCamera.h"
#include "COGL3DCamera.h"
#include "CGDI3DView.h"
#include "COGL3DView.h"
CG_NAMESPACE_ENTER
IMPLEMENT_SERIAL(CG3DSphere, CG3DRenderable, 1)
CG3DSphere::CG3DSphere()
	: CG3DRenderable(CString("CG3DSphere")), mRadius(50)
{
	mName.Format(_T("球体-%ld"), sID);
}
CG3DSphere::CG3DSphere(double r)
	: CG3DRenderable(CString("CG3DSphere")), mRadius(r)
{
	mName.Format(_T("球体-%ld"), sID);
}
CG3DSphere::CG3DSphere(const CG3DSphere& other)
	: CG3DRenderable(CString("CG3DSphere")), mRadius(other.mRadius)
{
	mName.Format(_T("球体-%ld"), sID);
}
CG3DSphere::~CG3DSphere()
{
}
//序列化
void CG3DSphere::Serialize(CArchive& ar)
{
	CG3DRenderable::Serialize(ar);
	if (ar.IsStoring())
	{
	}
	else
	{
	}
}
void CG3DSphere::Render(CGRenderContext* pRC, CGCamera* pCamera)
{
	if (pRC == nullptr || pRC->getView() == nullptr || pCamera == nullptr)
		return;
	if (pRC->IsKindOf(RUNTIME_CLASS(CGDI3DRenderContext)))
	{
		if (!pCamera->IsKindOf(RUNTIME_CLASS(CGDI3DCamera)))
			return;
	}
	else if (pRC->IsKindOf(RUNTIME_CLASS(COGL3DRenderContext)))
	{
		if (!pCamera->IsKindOf(RUNTIME_CLASS(COGL3DCamera)))
			return;
		mAppearance.apply(0, pCamera, pRC); //应用外观
		mPolygonMode.apply(0, pCamera, pRC);//应用多边形绘制模式
		glPushMatrix(); //保存当前的坐标系
		glMultMatrixd(mMat.ptr()); //图形变换（如果之前不保存坐标系，该变换会影响坐标系）
		//此处仅作为绘制示例：
		//使用glut库
		//glutSolidSphere(mRadius, mSlices, mStacks);
		//使用glu库
		GLUquadricObj * objSphere = gluNewQuadric();
		gluSphere(objSphere, mRadius, mSlices, mStacks);
		gluDeleteQuadric(objSphere);
		glPopMatrix(); //恢复原有坐标系
	}
}
CG_NAMESPACE_EXIT